name: Publish
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          python -m pip install boto3
          python cfh.py -cf test.json -desc "Test CloudFormation file"

          # -- test if we can create VPCs
          python cfh.py -cf test.json -add vpc myVPC -cidr 10.0.0.0/22
          python cfh.py -cf test.json -add publicsubnet myPublicSubnetA -az 0 -vpc myVPC -cidr 10.0.0.0/24
          python cfh.py -cf test.json -add publicsubnet myPublicSubnetB -az 1 -vpc myVPC -cidr 10.0.1.0/24
          python cfh.py -cf test.json -add natgateway myNatGateway -subnet myPublicSubnetA
          python cfh.py -cf test.json -add privatesubnet myPrivateSubnetA -az 0 -vpc myVPC -cidr 10.0.2.0/24 -routetable myNatGatewayRouteTableNATGateway
          python cfh.py -cf test.json -add privatesubnet myPrivateSubnetB -az 1 -vpc myVPC -cidr 10.0.3.0/24 -routetable myNatGatewayRouteTableNATGateway
          # -- inbound web traffic
          python cfh.py -cf test.json -add securitygroup SGWebInbound -vpc myVPC -ingress 0.0.0.0/0 -tcp 80
          python cfh.py -cf test.json -add securitygroup SGWebInbound -vpc myVPC -ingress 0.0.0.0/0 -tcp 443
          python cfh.py -cf test.json -add securitygroup SGWebInbound -vpc myVPC -egress 0.0.0.0/0
          # -- Web to database traffic
          python cfh.py -cf test.json -add securitygroup SGdatabase -vpc myVPC -egress 0.0.0.0/0
          python cfh.py -cf test.json -add securitygroup SGdatabase -vpc myVPC -ingress SGWebInbound -tcp 3306
          # -- create the web server
          python cfh.py -cf test.json -add ec2 EC2WebServer1 -subnet myPublicSubnetA -sg SGWebInbound
          # -- create the database
          python cfh.py -cf test.json -add rds myDatabase -subnet myPrivateSubnetA,myPrivateSubnetB -sg SGdatabase
          # -- launch template
          python cfh.py -cf test.json -add launchtemplate LaunchTemplate -sg SGWebInbound
          python cfh.py -cf test.json -add autoscaling myAutoscalingGroup -lt LaunchTemplate -subnet myPrivateSubnetA,myPrivateSubnetB -vpc myVPC
          python cfh.py -cf test.json -add elbv2 myELBv2 -sg SGWebInbound -subnet myPublicSubnetA,myPublicSubnetB
          # -- test serverless function
          python cfh.py -cf test.json -add lambda usecase1lambda
          python cfh.py -cf test.json -add functionurl myFunctionUrl -target usecase1lambda
          python cfh.py -cf test.json -add dynamodb myDynamoDbTable
          python cfh.py -cf test.json -add static myStaticS3
          python cfh.py -cf test.json -add eventbridge myEventBridge -cron "rate(5 minutes)" -target usecase2lambda
          python cfh.py -cf test.json -add parameter websiteMessage
          python cfh.py -cf test.json -add ssmparameter mySSMParameterStore -value "Hello there!"
                    
